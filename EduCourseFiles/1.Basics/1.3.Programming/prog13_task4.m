%% 1.3.13. Оптимизация алгоритма
% *Самостоятельная работа*
% % Оптимизируйте неэффективный алгоритм обработки температурных данных. Грамотно 
% используя возможности языка MATLAB, процесс обработки можно сделать намного 
% более эффективным на всех этапах работы даного алгоритма. На приведенной выборке 
% эффект ускорения не будет визуально заметен, но он широко проявится при обработке 
% больших массивов данных.
% % По сути, ваша задача сводится к тому, чтобы на писать 4 строчки кода - 
% по одной на каждом этапе.
%
%% 1. Загрузка данных
% Загрузка данных из текстового файла |temp3.txt| реализована на низком уровне 
% - последовательно в цикле (|while|) считывается каждая текстовая строка (|fgetl()|), 
% разбивается на значения (|textscan()|), которые сохраняются в промежуточную 
% переменную |vals|. Из неё затем формируется таблица |T|.
%%%%%
%   fid = fopen('temp3.txt');
%   names = fgetl(fid);
%   names = textscan(names, '%s%s%s%s', 'Delimiter', ',');
%   vals = {};
%   while ~feof(fid)
%       str = fgetl(fid);
%       vals = [vals; textscan(str, '%D%s%s%s', 'Delimiter', ',')];
%   end
%   fclose(fid);
%   T = cell2table(vals, 'VariableNames', string(names))
%%%%%
% Такой подход имеет смысл применять для чтения сложных файлов с непостоянной 
% структурой, возьмите его себе на заметку. В данном же случае файл простой, в 
% нем хранится таблица, значения которой разделены запятой. Его без проблем можно 
% считать стандартной командой для чтения таблиц. Сделайте это.
% Переменная |T| должна содержать таблицу, которая хранится в файле |temp3.txt| 
% (подсказка: |readtable()|)

% Таким образом, вы упростили код, сделали его более читаемым и эффективным 
% за счет знания функций MATLAB.
%
%% 2. Подготовка данных
% Пропущенные значения в файле были обозначены символом |'-'|, поэтому столбцы 
% с температурой (2, 3, 4) считались как текст, а не как числа. Ниже в цикле (|for|) 
% каждый из столбцов с температурными данными переводится в тип |double| командой 
% |convertvars|.
%%%%% 
%   for i = 2 : 4
%       T = convertvars(T, i, '@str2double');
%   end
%%%%
% Цикл в данном случае не нужен, потому что команда |convertvars| может сконвертировать 
% сразу несколько столбцов. Примените функцию |convertvars()| правильно, чтобы 
% цикл не понадобился (подсказка: обратите внимание на второй аргумент)

% Вы упростили код и сделали его более логичным за счет умения применять 
% векторизованные функции MATLAB.
%
%% 3. Обработка данных
% Таблица |T| содержит пропущенные значения. Приведенный код, проходясь в цикле 
% (|for|) по всей высоте таблицы (|height()|), каждое пропущенное значение столбца 
% |TMAX| (|if ismissing()|) заменяет на соответствующий элемент из столбца |TAVG|.
%%%%%
%   for i = 1 : height(T)
%       if ismissing(T.TMAX(i))
%           T.TMAX(i) = T.TAVG(i)
%       end
%   end
%%%%%
% Вы уже знаете, что подобный цикл с условием (|for-if|) можно заменить логическим 
% индексированием. Перепишите код так, чтобы вместо перебора элементов, все пропущенные 
% значения |TMAX| за раз заменились соответствующими значениями |TAVG| (подсказка: 
% |ismissing()|)

% Владея возможностями языка MATLAB, вы сделали код более понятным и компактным.
%
%% 4. Визуализация данных
% Для визуализации столбцов с температурными данными (2, 3, 4) создан цикл, 
% который по очереди строит 3 графика в одних осях. Эту технику можно применять, 
% если вы заранее не знаете, сколько графиков вы хотите построить или если каждый 
% график нужно отдельно настроить.
%%%%%
%   hold on
%   for i = 2 : 4
%       plot(T.DATE, T{:, i})
%   end
%   hold off
%%%%%
% В нашем случае нам просто надо отобразить 3 кривых. Это можно сделать без 
% цикла одной командой |plot()| правильно передав ей все данные для построения. 
% Сделайте это (в <https://www.mathworks.com/help/matlab/ref/plot.html документации> 
% есть подсказка и пример)

% Таким образом, владея документацией MATLAB, вы сумели найти в ней способ 
% сократить код в 5 раз, изучив особенности функции |plot()|.
